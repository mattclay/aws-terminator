- hosts: localhost
  gather_facts: False
  vars:
    aws_region: "us-east-1"
    stage: "prod"
    terminator_policy: "{{ lookup('template', 'terminator-policy.json') }}"
    packaging_dir: "{{ playbook_dir }}/../.cache/packaging"
    python_version: python3.13
  tasks:
    - name: load config
      tags: always
      ansible.builtin.include_vars:
        file: config.yml
    - name: check config
      tags: always
      ansible.builtin.assert:
        that: 'test_account_id != lambda_account_id'
    - name: get aws account facts
      tags: always
      mattclay.aws.aws_account_facts:
    - name: show configuration
      tags: always
      ansible.builtin.debug: msg="aws_region={{ aws_region }}, stage={{ stage }}, aws_account_id={{ aws_account_id }}"
    - name: verify aws_account_id matches lambda_account_id
      tags: always
      ansible.builtin.assert:
        that: "aws_account_id == lambda_account_id"
    - name: create iam role for terminator functions
      tags: iam
      amazon.aws.iam_role:
        name: "{{ api_name }}-terminator-{{ stage }}"
        description: "iam role for terminator functions"
        state: present
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            Action: "sts:AssumeRole"
            Principal:
              Service: "lambda.amazonaws.com"
            Effect: "Allow"
    - name: create iam policy for terminator functions
      tags: iam
      amazon.aws.iam_policy:
        iam_type: role
        iam_name: "{{ api_name }}-terminator-{{ stage }}"
        policy_name: "{{ api_name }}-terminator-{{ stage }}"
        state: present
        policy_json: "{{ terminator_policy }}"
    - name: create virtualenv with terminator requirements
      tags: lambda
      ansible.builtin.pip:
        requirements: "{{ playbook_dir }}/requirements.txt"
        virtualenv: "{{ packaging_dir }}/terminator-requirements/python"
        virtualenv_python: "{{ python_version }}"
    - name: package terminator requirements
      tags: lambda
      mattclay.aws.lambda_package:
        src: "{{ packaging_dir }}/terminator-requirements"
        dest: "{{ packaging_dir }}/terminator-requirements.zip"
        include:
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ python_version }}/site-packages/*"
        exclude:
          # pre-compiled bytecode
          - "*.pyc"
          # packaging information not needed at runtime
          - "*.dist-info/*"
          # only used for botocore documentation generation
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ python_version }}/site-packages/docutils/*"
          # installed during creation of the virtualenv
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ python_version }}/site-packages/pip/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ python_version }}/site-packages/wheel/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ python_version }}/site-packages/setuptools/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ python_version }}/site-packages/pkg_resources/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ python_version }}/site-packages/easy_install.py"
    - name: publish terminator requirements layer
      tags: lambda
      mattclay.aws.lambda_layer:
        name: "{{ api_name }}-terminator-requirements"
        description: "Python requirements for {{ api_name }}-terminator"
        compatible_runtimes:
          - "{{ python_version }}"
        path: "{{ packaging_dir }}/terminator-requirements.zip"
        license_info: GPL-3.0-only
        region: "{{ aws_region }}"
        state: present
      register: terminator_requirements_layer
    - name: create terminator package
      tags: lambda
      mattclay.aws.lambda_package:
        src: "{{ playbook_dir }}"
        dest: "{{ packaging_dir }}/terminator.zip"
        include:
          - "{{ playbook_dir }}/terminator_lambda.py"
          - "{{ playbook_dir }}/terminator/*.py"
    - name: deploy terminator package
      tags: lambda
      mattclay.aws.lambda:
        region: "{{ aws_region }}"
        name: "{{ api_name }}-terminator"
        local_path: "{{ packaging_dir }}/terminator.zip"
        runtime: "{{ python_version }}"
        timeout: 120
        handler: terminator_lambda.lambda_handler
        memory_size: 256
        role: "{{ api_name }}-terminator-{{ stage }}"
        publish: True
        qualifier: "{{ stage }}"
        environment:
          TEST_ACCOUNT_ID: "{{ test_account_id }}"
          API_NAME: "{{ api_name }}"
        layers:
          - "{{ terminator_requirements_layer.layer.layer_version_arn }}"
        log_format: JSON
        log_group: "/{{ api_name }}/aws/lambda/terminator"
      register: terminator_function
    - name: alias terminator functions
      tags: lambda
      mattclay.aws.lambda_alias:
        region: "{{ aws_region }}"
        state: present
        name: "{{ stage }}"
        description: "{{ stage }} alias"
        function_name: "{{ terminator_function.meta.function_name }}"
        version: "{{ terminator_function.meta.version }}"
    - name: schedule terminator event
      tags: schedule
      mattclay.aws.cloudwatch_event:
        region: "{{ aws_region }}"
        rule_name: "{{ api_name }}-terminator-{{ stage }}"
        schedule_expression: rate(5 minutes)
        function_name: "{{ api_name }}-terminator:{{ stage }}"
      register: event
    - name: schedule terminator event permissions
      tags: schedule
      mattclay.aws.lambda_policy:
        region: "{{ aws_region }}"
        function_name: "{{ api_name }}-terminator:{{ stage }}"
        source_arn: "arn:aws:events:{{ aws_region }}:{{ aws_account_id }}:rule/{{ api_name }}-terminator-{{ stage }}"
        principal_service: events.amazonaws.com
