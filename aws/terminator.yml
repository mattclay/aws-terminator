- hosts: localhost
  gather_facts: False
  vars:
    aws_region: "us-east-1"
    stage: "prod"
    terminator_policy: "{{ lookup('template', 'terminator-policy.json') }}"
    packaging_dir: "{{ playbook_dir }}/../.cache/packaging"
  tasks:
    - name: load config
      tags: always
      include_vars:
        file: config.yml
    - name: check config
      tags: always
      assert:
        that: 'test_account_id != lambda_account_id'
    - name: get aws account facts
      tags: always
      aws_account_facts:
    - name: show configuration
      tags: always
      debug: msg="aws_region={{ aws_region }}, stage={{ stage }}, aws_account_id={{ aws_account_id }}"
    - name: verify aws_account_id matches lambda_account_id
      tags: always
      assert:
        that: "aws_account_id == lambda_account_id"
    - name: create iam role for terminator functions
      tags: iam
      iam:
        iam_type: role
        name: "{{ api_name }}-terminator-{{ stage }}"
        state: present
        trust_policy:
          Version: '2012-10-17'
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
    - name: create iam policy for terminator functions
      tags: iam
      iam_policy:
        iam_type: role
        iam_name: "{{ api_name }}-terminator-{{ stage }}"
        policy_name: "{{ api_name }}-terminator-{{ stage }}"
        state: present
        policy_json: "{{ terminator_policy | to_nice_json }}"
    - name: create virtualenv with terminator requirements
      tags: lambda
      pip:
        requirements: "{{ playbook_dir }}/requirements.txt"
        virtualenv: "{{ packaging_dir }}/terminator-requirements/python"
        virtualenv_python: python3.7
    - name: package terminator requirements
      tags: lambda
      lambda_package:
        src: "{{ packaging_dir }}/terminator-requirements"
        dest: "{{ packaging_dir }}/terminator-requirements.zip"
        include:
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.7/site-packages/*"
        exclude:
          # pre-compiled bytecode
          - "*.pyc"
          # packaging information not needed at runtime
          - "*.dist-info/*"
          # only used for botocore documentation generation
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.7/site-packages/docutils/*"
          # installed during creation of the virtualenv
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.7/site-packages/pip/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.7/site-packages/wheel/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.7/site-packages/setuptools/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.7/site-packages/pkg_resources/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.7/site-packages/easy_install.py"
    - name: create terminator package
      tags: lambda
      lambda_package:
        src: "{{ playbook_dir }}"
        dest: "{{ packaging_dir }}/terminator.zip"
        include:
          - "{{ playbook_dir }}/terminator_lambda.py"
          - "{{ playbook_dir }}/terminator/*.py"

- name: add each region that needs deployment as a host
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Add each region as a host
      add_host:
        aws_region: "{{ item }}"
        group: all_regions
        ansible_connection: local
        name: "{{ item }}"
      loop: "{{ lookup('aws_regions', wantlist=True) }}"
      tags: always

- hosts: all_regions
  gather_facts: False
  serial: "100%"
  vars:
    stage: "prod"
    terminator_policy: "{{ lookup('template', 'terminator-policy.json') }}"
    packaging_dir: "/tmp/packaging"

    - include_tasks: deploy_terminator.yml
      tags: always
